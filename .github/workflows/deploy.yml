name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      node_modules_cache: ${{ steps.cache-node-modules.outputs.cache-hit }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: ./backend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies (backend)
        run: |
          cd ./backend
          npm install

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Restore dependencies from cache
        uses: actions/cache@v3
        with:
          path: ./backend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Run tests (NestJS)
        run: cd ./backend && npm run test

  build_docker_image:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          cd ./backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }} .

  deploy_docker_image:
    runs-on: ubuntu-latest
    needs: build_docker_image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Push Docker image to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_LOGIN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: deploy_docker_image  # Este job depende do sucesso do job 'deploy_docker_image'
  #   environment: production
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #
  #     - name: Deploy to DigitalOcean
  #       env:
  #         DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
  #         DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i ${{ secrets.DEPLOY_SSH_KEY }} username@your_server_ip << 'EOF'
  #           # Parar o container em execução
  #           docker stop myapp || true
  #           docker rm myapp || true
  #
  #           # Puxar a nova imagem do Docker Hub
  #           docker pull $DOCKER_IMAGE
  #
  #           # Iniciar o novo container
  #           docker run -d --name myapp -p 80:3000 $DOCKER_IMAGE
  #         EOF
