// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  name               String
  email              String?            @unique
  password           String?
  imgUrl             String?
  numberOfRecipes    Int?               @default(0)
  numberOfFollowers  Int?               @default(0)
  numberOfFollowings Int                @default(0)
  username           String?            @unique
  createdAt          DateTime?          @default(now())
  isActive           Boolean?           @default(true)
  authProvider       String?            @default("local")
  recipes            Recipe[]
  comments           Comment[]
  refreshTokens      RefreshToken[]
  passwordRecoveries PasswordRecovery[]

  following      Follow[]         @relation("FollowingRelation")
  followers      Follow[]         @relation("FollowerRelation")
  FavoriteRecipe FavoriteRecipe[]
  ViewRecipe     ViewRecipe[]
}

model Follow {
  id         String @id @default(uuid())
  followerId String
  followeeId String

  follower User @relation("FollowingRelation", fields: [followerId], references: [id])
  followee User @relation("FollowerRelation", fields: [followeeId], references: [id])

  createdAt DateTime @default(now())

  @@unique([followerId, followeeId])
}

model ViewRecipe {
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])

  @@id([userId, recipeId])
}

model FavoriteRecipe {
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])

  @@id([userId, recipeId])
}

model RefreshToken {
  id      String  @id @default(uuid())
  token   String
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  email   String
  revoked Boolean @default(false)
}

model PasswordRecovery {
  id        String  @id @default(uuid())
  token     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  email     String
  expiresAt BigInt
  revoked   Boolean @default(false)
}

model Recipe {
  id                String   @id @default(uuid())
  name              String
  preparationMethod Json
  preparationTime   Int
  imgUrl            String?
  difficultyLevel   String?
  calories          Int?
  macronutrients    Json?
  allergens         String[]
  servingCount      Int?
  viewCount         Int      @default(0)
  favoriteCount     Int      @default(0)
  averageRating     Float?
  costEstimate      Float?
  additionalTips    String?
  isPublished       Boolean  @default(true)
  version           Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deleted           Boolean  @default(false)
  userId            String
  numberOflikes     Int      @default(0)

  comments          Comment[]
  recipeIngredients RecipeIngredient[]
  mealTypes         RecipeMealType[]
  cuisineStyles     RecipeCuisineStyle[]
  user              User                 @relation(fields: [userId], references: [id])
  FavoriteRecipe    FavoriteRecipe[]
  ViewRecipe        ViewRecipe[]
}

model RecipeIngredient {
  quantity     Float
  unit         String
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  @@id([recipeId, ingredientId])
}

model Ingredient {
  id                String             @id @default(uuid())
  name              String             @unique
  recipeIngredients RecipeIngredient[]
}

model MealType {
  id      String           @id @default(uuid())
  name    String
  recipes RecipeMealType[]
}

model CuisineStyle {
  id      String               @id @default(uuid())
  name    String
  recipes RecipeCuisineStyle[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])
}

model RecipeMealType {
  recipeId   String
  mealTypeId String
  Recipe     Recipe   @relation(fields: [recipeId], references: [id])
  MealType   MealType @relation(fields: [mealTypeId], references: [id])

  @@id([recipeId, mealTypeId])
}

model RecipeCuisineStyle {
  recipeId       String
  cuisineStyleId String
  Recipe         Recipe       @relation(fields: [recipeId], references: [id])
  CuisineStyle   CuisineStyle @relation(fields: [cuisineStyleId], references: [id])

  @@id([recipeId, cuisineStyleId])
}
